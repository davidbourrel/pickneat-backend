// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum OrderStatus {
  pending
  preparing
  delivered
  cancelled
}

enum PaymentStatus {
  pending
  completed
  failed
}

enum PaymentMethod {
  credit_card
  debit_card
  paypal
  apple_pay
}

model User {
  id              Int      @id @default(autoincrement())
  firstName       String   @map("first_name") @db.VarChar(50)
  lastName        String   @map("last_name") @db.VarChar(50)
  email           String   @unique @db.VarChar(100)
  passwordHash    String   @map("password_hash") @db.VarChar(255)
  phoneNumber     String?  @map("phone_number") @db.VarChar(20)
  profileImageUrl String?  @map("profile_image_url") @db.VarChar(255)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")
  carts           Cart[]
  orders          Order[]

  @@map("users")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  description String?
  imageUrl    String?   @map("image_url") @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at")
  products    Product[]

  @@map("categories")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  description String?
  price       Decimal     @db.Decimal(10, 2)
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int         @map("category_id")
  imageUrl    String?     @map("image_url") @db.VarChar(255)
  isAvailable Boolean     @default(true) @map("is_available")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@index([categoryId])
  @@map("products")
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @map("updated_at")
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id                  Int      @id @default(autoincrement())
  cart                Cart     @relation(fields: [cartId], references: [id])
  cartId              Int      @map("cart_id")
  product             Product  @relation(fields: [productId], references: [id])
  productId           Int      @map("product_id")
  quantity            Int
  specialInstructions String?  @map("special_instructions")
  priceAtAdding       Decimal  @map("price_at_adding") @db.Decimal(10, 2)
  createdAt           DateTime @default(now()) @map("created_at")

  @@index([cartId])
  @@map("cart_items")
}

model Order {
  id              Int           @id @default(autoincrement())
  user            User          @relation(fields: [userId], references: [id])
  userId          Int           @map("user_id")
  totalAmount     Decimal       @map("total_amount") @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(pending) @map("payment_status")
  orderStatus     OrderStatus   @default(pending) @map("order_status")
  deliveryAddress String        @map("delivery_address")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @map("updated_at")
  items           OrderItem[]
  payments        Payment[]

  @@index([userId])
  @@map("orders")
}

model OrderItem {
  id                  Int      @id @default(autoincrement())
  order               Order    @relation(fields: [orderId], references: [id])
  orderId             Int      @map("order_id")
  product             Product  @relation(fields: [productId], references: [id])
  productId           Int      @map("product_id")
  quantity            Int
  priceAtPurchase     Decimal  @map("price_at_purchase") @db.Decimal(10, 2)
  specialInstructions String?  @map("special_instructions")
  createdAt           DateTime @default(now()) @map("created_at")

  @@index([orderId])
  @@map("order_items")
}

model Payment {
  id            Int           @id @default(autoincrement())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int           @map("order_id")
  paymentMethod PaymentMethod @map("payment_method")
  transactionId String        @unique @map("transaction_id") @db.VarChar(255)
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(pending)
  createdAt     DateTime      @default(now()) @map("created_at")

  @@map("payments")
}
